#!/usr/bin/env node

/**
 * Exits with 0 if there are no missing columns that can be automatically checked and easilly forgotten
 * to add, otherwise 1.
 */

require('../src/applications/index');
const getPlan = require('../src/applications/plan').get;
const db = require('../src/db');
const qb = require('@imatic/pgqb');
const {SQL} = require('sql-template-strings');
const _ = require('lodash/fp');

const flatMapWithKey = _.flatMap.convert({cap: false});

/**
 * @param {{schema: string, tables: string[]}[]} tables
 *
 * @return {{schema: string, name: strng}[]}
 */
function filterTablesWithMissingCreatedAtColumn(tables) {
    const tableExprs = _.map(({schema, tables}) => {
        return qb.expr.and(
            qb.expr.eq('table_schema', qb.val.inlineParam(schema)),
            qb.expr.in('table_name', tables.map(qb.val.inlineParam))
        );
    }, tables);

    const sqlMap = qb.merge(
        qb.select(['table_schema', 'table_name']),
        qb.from('information_schema.columns'),
        qb.where(qb.expr.or(...tableExprs)),
        qb.groupBy(['table_schema', 'table_name']),
        qb.having(
            qb.val.raw(SQL`NOT ('createdAt' = ANY(ARRAY_AGG("column_name")))`)
        )
    );

    return db.query(qb.toSql(sqlMap)).then((res) =>
        res.rows.map((row) => ({
            schema: row.table_schema,
            name: row.table_name,
        }))
    );
}

/**
 * @param {{name: string, schema: string}} table
 *
 * @returns {string}
 */
function addCreatedAtColumnQuery(table) {
    return `ALTER TABLE "${table.schema}"."${table.name}" ADD COLUMN "createdAt" TIMESTAMP DEFAULT statement_timestamp();
UPDATE "${table.schema}"."${table.name}" "t"
SET "createdAt" = (
    SELECT
    "a"."action_tstamp_stm" as "createdAt"
    FROM
    "audit"."logged_actions" "a"
    WHERE
    "a"."schema_name" = '${table.schema}'
    AND "a"."table_name" = '${table.name}'
    AND "a"."action" = 'I'
    AND "a"."row_data" OPERATOR("public".->) 'key' = "t"."key":: text
    LIMIT 1
);
CREATE INDEX "${table.name}_createdAt_idx" ON "${table.schema}"."${table.name}" ("createdAt");`;
}

/**
 * @param {{name: string, schema: string}} table
 *
 * @returns {string}
 */
function dropCreatedAtColumnQuery(table) {
    return `ALTER TABLE "${table.schema}"."${table.name}" DROP COLUMN "createdAt";`;
}

async function main() {
    await db.init();

    const tables = flatMapWithKey((group, groupName) => {
        return {
            schema: groupName,
            tables: _.flatMap((type) => {
                return type.table;
            }, group),
        };
    }, getPlan());

    const tablesWithMissingCreatedAtColumn =
        await filterTablesWithMissingCreatedAtColumn(tables);

    if (tablesWithMissingCreatedAtColumn.length === 0) {
        return null;
    }

    return {
        create: tablesWithMissingCreatedAtColumn.map(addCreatedAtColumnQuery),
        drop: tablesWithMissingCreatedAtColumn.map(dropCreatedAtColumnQuery),
    };
}

main().then((missingColumns) => {
    if (missingColumns == null) {
        return process.exit(0);
    }

    console.error(`Some columns are missing. Create migration with following contents:
==================================================================================

do.sql
------
${missingColumns.create.join('\n')}

undo.sql:
---------
${missingColumns.drop.join('\n')}`);

    process.exit(1);
});
