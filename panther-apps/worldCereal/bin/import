#!/usr/bin/env node

/**
This script is used to import product tiles from given directory
*/
const fs = require('fs');
const path = require('path');
const _ = require('lodash');
const fse = require('fs-extra');
const axios = require('axios').default;
const https = require('https');

const product = require('../product');

const ADMIN_KEY = '3fdd158d-4b78-4d11-92c7-403b4adab4d8';
const API_URL = 'https://139.177.178.219/backend'

const folder = process.argv[2];

if (!folder) {
    throw new Error('folder has to be specified')
}

function getStacFiles(dir, stacFiles) {
    let listFiles = fs.readdirSync(dir, { withFileTypes: true });

    stacFiles = stacFiles || [];

    listFiles.forEach((file) => {
        if (file.isDirectory()) {
            getStacFiles(path.resolve(dir, file.name), stacFiles);
        } else if (path.extname(file.name).toLowerCase() === ".json") {
            let stacFilePath = path.resolve(dir, file.name);
            stacFiles.push(stacFilePath);
        }
    })

    return stacFiles;
}

function getUnig(array) {
    return _.uniq(array);
}

function getStac(path) {
    return fse.readJsonSync(path);
}

async function createProducts(stacFilePaths) {
    let createdProductKeys = [];

    console.log(`Creating products from ${stacFilePaths.length} STAC files!`);

    for (let stacFilePath of stacFilePaths) {
        console.log(stacFilePath);

        let createdProductKey = await createProduct(getStac(stacFilePath));
        if (createdProductKey) {
            createdProductKeys.push(createdProductKey);
        }
    }

    createdProductKeys = getUnig(createdProductKeys);

    console.log(`${createdProductKeys.length} products was created!`);

    return createdProductKeys;
}

async function createProduct(stac) {
    return axios({
        url: `${API_URL}/rest/project/worldCereal/product`,
        method: "PUT",
        headers: {
            "X-User-Info": ADMIN_KEY
        },
        data: stac,
        httpsAgent: new https.Agent({
            rejectUnauthorized: false
        })
    }).then((response) => {
        let productKey = product.getKeyByProductId(stac);

        console.log(`Created product with key ${productKey}!`);

        return productKey;
    }).catch((error) => {
        console.log(`#ERROR# ${JSON.stringify(error.response.data)}`)
    })
}

async function getExistingProducts() {
    return axios({
        url: `${API_URL}/rest/project/worldCereal/product/filtered`,
        method: "POST",
        headers: {
            "X-User-Info": ADMIN_KEY
        },
        data: {},
        httpsAgent: new https.Agent({
            rejectUnauthorized: false
        })
    }).then(async (response) => {
        return response.data.products;
    }).catch((error) => {
        console.log(error);
        throw new Error('Unable to get existing products!');
    })
}

async function removeProductByKey(productKey) {
    return axios({
        url: `${API_URL}/rest/project/worldCereal/product`,
        method: "DELETE",
        headers: {
            "X-User-Info": ADMIN_KEY
        },
        params: {
            key: productKey
        },
        httpsAgent: new https.Agent({
            rejectUnauthorized: false
        })
    }).then(async (response) => {
        console.log(`Product ${productKey} was removed!`);
    }).catch((error) => {
        console.log(`#ERROR# Unable to remove product ${productKey}!`);
    })
}

async function removeProducesByKey(productKeys) {
    for (let productKey of productKeys) {
        await removeProductByKey(productKey);
    }
}

function getProductKeysFromStacFiles(stacFiles) {
    let productKeys = [];

    for (let stacFile of stacFiles) {
        let stac = getStac(stacFile);
        let productKey = product.getKeyByProductId(stac);

        productKeys.push(productKey);
    }

    return _.uniq(productKeys);
}

async function init() {
    let stacFiles = getStacFiles(folder);
    stacFiles = getUnig(stacFiles);

    let existingProducts = await getExistingProducts();
    let existingProductKeys = _.map(existingProducts, 'key');

    let createdProductKeys = await createProducts(stacFiles);

    let productToRemoveKeys = _.difference(existingProductKeys, createdProductKeys);

    await removeProducesByKey(productToRemoveKeys);

    process.exit();
}

init();
